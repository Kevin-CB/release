// -*- Groovy -*-

/*
  Jenkins Plugins:
    * Azure-Credentials
    * SSH-agent
*/

pipeline {
    agent {
      kubernetes {
        label 'release-linux'
        yamlFile 'PodTemplates.d/release-linux.yaml'
        inheritFrom 'jnlp-linux'
      }
    }

    options {
      buildDiscarder logRotator(
        artifactNumToKeepStr: '5',
        numToKeepStr: '10'
      )
      disableConcurrentBuilds()
    }

    environment {
      RELEASE_PROFILE               = 'experimental'
      GPG_PASSPHRASE                = credentials('release-gpg-passphrase')
      MAVEN_REPOSITORY_USERNAME     = credentials('maven-repository-username')
      MAVEN_REPOSITORY_PASSWORD     = credentials('maven-repository-password')
      SIGN_STOREPASS                = credentials('signing-cert-pass')
    }

    stages {
      stage('Clone Jenkins Git Repository') {
        steps {
          container('jnlp') {
            sshagent(['release-key']) {
              sh 'utils/release.sh --cloneJenkinsGitRepository'
            }
          }
        }
      }
      stage('Clean Release') {
        steps {
          container('maven') {
            sh 'utils/release.sh --cleanRelease'
          }
        }
      }
      stage('Get Code Signing Certificate') {
        environment {
          AZURE_VAULT_NAME              = 'prodreleasecore'
          AZURE_VAULT_CERT              = 'prodreleasecore'
          AZURE_VAULT_FILE              = 'jenkins.pem'
          AZURE_VAULT_CLIENT_ID         = credentials('azure-vault-client-id')
          AZURE_VAULT_CLIENT_SECRET     = credentials('azure-vault-client-secret')
          AZURE_VAULT_TENANT_ID         = credentials('azure-vault-tenant-id')
        }

        steps {
          container('azure-cli') {
            sh '''
              utils/release.sh --downloadAzureKeyvaultSecret
              utils/release.sh --configureKeystore
            '''
          }
        }
      }
      stage('Get GPG key') {
        environment {
          AZURE_STORAGE_ACCOUNT         = 'prodreleasecore'
          AZURE_STORAGE_CONTAINER_NAME  = 'gpg'
          AZURE_STORAGE_KEY             = credentials('gpg-storage-account-key')
        }

        steps {
          container('azure-cli') {
            sh '''
              utils/release.sh --getGPGKeyFromAzure
            '''
          }
        }
      }
      stage('Prepare Release') {
        steps {
          container('maven') {
            // Maven Release requires gpg key with password password and a certificate key with password
            sh '''
              utils/release.sh --configureGPG
              utils/release.sh --configureGit
              utils/release.sh --prepareRelease
            '''

            script {
              def properties = readProperties file: 'release/release.properties'
              env.RELEASE_SCM_TAG = properties['scm.tag']
            }
          }
        }
      }
      stage('Push Commits') {
        // environment {
        //   GIT_SSH = 'ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i $RELEASE_SSH_KEY'
        // }

        steps {
          // ssh has doesn't work when no user is associated to a uid like 1000, therefor I run git command from
          // the jnlp container.
          container('jnlp') {
            // https://github.com/jenkinsci/kubernetes-plugin/pull/331
            // therefor we use withCredentials instead of sshagent
            // it's fine if used from the jnlp container
            sshagent(['release-key']) {
              // We want to only commit to the repository used by the jenkins job
              // instead of jenkinsci/jenkins as defined in pom.xml
              sh 'utils/release.sh --pushCommits'
            }
            // withCredentials([sshUserPrivateKey(credentialsId: 'release-key', keyFileVariable: 'RELEASE_SSH_KEY')]) {
            //   sh 'utils/release.sh --pushCommits'
            // }

          }
        }
      }
      stage('Stage Release') {
        steps {
          container('maven') {
            sh '''
              utils/release.sh --stageRelease
              utils/release.sh --verifyGPGSignature
            '''
          }
        }
      }
    }
    post {
      failure {
        input '''Can I delete the pod? '''
      }
    }
}
