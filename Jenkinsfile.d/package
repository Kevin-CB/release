pipeline {
  agent {
    kubernetes {
      label 'package-linux'
      yamlFile 'PodTemplates.d/package-linux'
      inheritFrom 'jnlp-linux'
      workingDir '/home/jenkins/agent'
    }
  }

  parameters {
    choice(
      choices: [
        'experimental'
      ],
      description: 'Define which Jenkins Release we are packaging for. https://git.io/Jv7Nr',
      name: 'RELEASE_PROFILE'
    )
  }

  options {
    buildDiscarder logRotator(
      artifactDaysToKeepStr: '14',
      artifactNumToKeepStr: '5',
      daysToKeepStr: '30',
      numToKeepStr: '10'
    )
    disableConcurrentBuilds()
  }

//  ENV JENKINS_VERSION
//    stable: It represents the latest stable version that satifies version pattern X.Y.Z
//    weekly: It represents the latest weekly version that satisfies version pattern X.Y
//    <version>: where version represent any valid existing version like 2.176.2

  environment {
    BUILDENV                  = './env/test.mk'
    BRAND                     = "./branding/jenkins-experimental.mk"
    CREDENTIAL                = './credentials/test.mk'
    GPG_PASSPHRASE            = credentials('release-gpg-passphrase')
    PACKAGING_GIT_REPOSITORY  = 'git@github.com:jenkinsci/packaging.git'
    PACKAGING_GIT_BRANCH      = 'INFRA-910-core-release-automation'
    SIGN_KEYSTORE_FILENAME    = 'jenkins.pfx'
    SIGN_STOREPASS            = credentials('signing-cert-pass')
    WAR_FILENAME              = 'jenkins.war'
    WAR                       = "$WORKSPACE/$WORKING_DIR/$WAR_FILENAME"
    WORKING_DIR               = "release"
  }

  stages {
    stage('Get GPG key') {

      steps {
        container('azure-cli') {
          checkout scm
          dir (WORKING_DIR){
            git branch: PACKAGING_GIT_BRANCH, credentialsId: 'release-key', url: PACKAGING_GIT_REPOSITORY
          }
      
          sh '''
            ./utils/release.sh --getGPGKeyFromAzure
          '''

          dir (WORKING_DIR){
            stash includes: GPG_FILE , name: 'GPG'
          }
        }

        container('packaging'){
          sh './utils/release.sh --configureGPG'
        }
      }
    }

    stage('Get Code Signing Certificate') {
      environment {
        AZURE_VAULT_NAME              = 'prodreleasecore'
        AZURE_VAULT_CERT              = 'prodreleasecore'
        AZURE_VAULT_FILE              = 'jenkins.pem'
        AZURE_VAULT_CLIENT_ID         = credentials('azure-vault-client-id')
        AZURE_VAULT_CLIENT_SECRET     = credentials('azure-vault-client-secret')
        AZURE_VAULT_TENANT_ID         = credentials('azure-vault-tenant-id')
      }

      steps {
        container('azure-cli') {
          sh '''
            utils/release.sh --downloadAzureKeyvaultSecret
          '''
        }

        stash includes: SIGN_KEYSTORE_FILENAME, name: 'KEYSTORE'
      }
    }

    stage('Download WAR archive to package'){
      steps{
        container('packaging'){
          sh 'utils/getJenkinsVersion.py'
          sh '''
            ./utils/release.sh --downloadJenkins
          '''
          dir (WORKING_DIR){
            stash includes: WAR_FILENAME, name: "WAR"
            archiveArtifacts artifacts: "*.war"
          }
        }
      }
    }
    stage('Package'){
      failFast false
      parallel {
        stage('WAR') {
          stages {
            stage('Publish'){
              steps {
                container('packaging'){
                  dir (WORKING_DIR){
                    sh 'make war.publish'
                  }
                }
              }
            }
          }
        }
        stage('Debian') {
          stages {
            stage('Build'){
              steps {
                container('packaging'){
                  dir (WORKING_DIR){
                    sh 'make deb'
                    archiveArtifacts artifacts: "target/debian/*.deb"
                  }
                }
              }
            }
            stage('Publish'){
              steps {
                container('packaging'){
                  dir (WORKING_DIR){
                    sh 'make deb.publish'
                  }
                }
              }
            }
          }
        }
        stage('Redhat') {
          stages {
            stage('Build'){
              steps {
                container('packaging'){
                  dir (WORKING_DIR){
                    sh 'make rpm'
                    archiveArtifacts artifacts: "target/rpm/*.rpm"
                  }
                }
              }
            }
            stage('Publish'){
              steps {
                container('packaging'){
                  dir (WORKING_DIR){
                    sh 'make rpm.publish'
                  }
                }
              }
            }
          }
        }
        stage('Suse') {
          stages {
            stage('Build'){
              steps {
                container('packaging'){
                  dir (WORKING_DIR){
                    sh 'make suse'
                    archiveArtifacts artifacts: "target/suse/*.rpm"
                  }
                }
              }
            }
            stage('Publish'){
              steps {
                container('packaging'){
                  dir (WORKING_DIR){
                    sh 'make suse.publish'
                  }
                }
              }
            }
          }
        }
        stage('Windows') {
          // Windows requirement: Every steps need to be executed inside default jnlp 
          // as the step 'container' is knowned to not be working
          agent {
            kubernetes {
              label 'packaging-windows'
              yamlFile 'PodTemplates.d/package-windows'
            }
          }
          stages {
            stage('Build'){
              steps {
                checkout scm
                dir (WORKING_DIR){
                  git branch: PACKAGING_GIT_BRANCH, credentialsId: 'release-key', url: PACKAGING_GIT_REPOSITORY

                  unstash 'GPG'
                  unstash 'WAR'
                  unstash 'KEYSTORE'

                  bat """
                    $env:WAR = \'C:\\home\\jenkins\\agent\\workspace\\core-package_master\\$WORKING_DIR\\jenkins.war\'
                    powershell -File C:\\home\\jenkins\\agent\\workspace\\core-package_master\\$WORKING_DIR\\make.ps1
                  """
                }
              }
            }
            stage('Publish'){
              steps {
                dir (WORKING_DIR){
                  bat """
                    powershell -File C:\\home\\jenkins\\agent\\workspace\\core-package_master\\$WORKING_DIR\\msi\\publish\\publish.ps1
                  """
                  archiveArtifacts 'msi\\build\\bin\\Release\\en-US\\*.msi'
                  archiveArtifacts 'msi\\build\\bin\\Release\\en-US\\*.msi.sha256'
                }
              }
            }
          }
        }
      }
    }
  }
}
